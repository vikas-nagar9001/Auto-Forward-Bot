from telethon import events
from telethon.tl.custom import Button
import logging
from .base_handler import BaseHandler

class HelpHandler(BaseHandler):
    """Handler for help and documentation"""
    
    def __init__(self, bot, users_collection, groups_collection):
        super().__init__(bot, users_collection, groups_collection)
        self.help_state = {}  # {user_id: {"category": str, "section": str}}

    async def register_handlers(self):
        """Register all help-related handlers"""
        self.bot.add_event_handler(
            self.start_command,
            events.NewMessage(pattern=r'^/start$')
        )
        self.bot.add_event_handler(
            self.help_command,
            events.NewMessage(pattern=r'^/help$')
        )
        self.bot.add_event_handler(
            self.help_callback,
            events.CallbackQuery(pattern=r'^help_')
        )

    async def start_command(self, event):
        """Enhanced start command handler with step-by-step guide"""
        user = await self.check_registered(event.sender_id)
        
        if user:
            # User is registered, show main menu
            welcome_message = (
                "üëã **Welcome Back!**\n\n"
                "What would you like to do?\n\n"
                "‚Ä¢ Forward messages\n"
                "‚Ä¢ Manage groups\n"
                "‚Ä¢ Check status\n"
                "‚Ä¢ View your account"
            )
            keyboard = [
                [
                    Button.inline("üì§ Forward Message", data="forward_new"),
                    Button.inline("üë• Manage Groups", data="group_action_view")
                ],
                [
                    Button.inline("üìä Check Status", data="status_main_menu"),
                    Button.inline("üë§ My Account", data="account_action_view")
                ],
                [Button.inline("üìö Help & Tips", data="help_category_main")]
            ]
        else:
            # New user, show getting started guide
            welcome_message = (
                "üëã **Welcome to Auto Message Forwarder!**\n\n"
                "This bot helps you automatically forward messages to multiple groups "
                "at specified intervals.\n\n"
                "**Getting Started:**\n"
                "1Ô∏è‚É£ Register your account\n"
                "2Ô∏è‚É£ Add your groups\n"
                "3Ô∏è‚É£ Start forwarding messages\n\n"
                "Let's begin by registering your account!"
            )
            keyboard = [
                [Button.inline("üìù Register Now", data="help_category_register")],
                [Button.inline("‚ùì How It Works", data="help_category_guide")]
            ]

        await event.reply(welcome_message, buttons=keyboard)

    async def help_command(self, event):
        """Enhanced help command with categories and step-by-step guides"""
        help_message = (
            "üìö **Bot Help & Documentation**\n\n"
            "Choose a category to learn more:"
        )

        keyboard = [
            [
                Button.inline("üî∞ Getting Started", data="help_category_guide"),
                Button.inline("üìù Registration", data="help_category_register")
            ],
            [
                Button.inline("üë• Group Management", data="help_category_groups"),
                Button.inline("üì§ Message Forwarding", data="help_category_forward")
            ],
            [
                Button.inline("üìä Status & Settings", data="help_category_status"),
                Button.inline("‚ùì FAQ", data="help_category_faq")
            ],
            [Button.inline("üîç Search Help", data="help_category_search")]
        ]

        await event.reply(help_message, buttons=keyboard)

    async def help_callback(self, event):
        """Handle help button callbacks"""
        try:
            user_id = event.sender_id
            data = event.data.decode('utf-8').replace('help_', '')

            if data.startswith('category_'):
                category = data.replace('category_', '')
                await self.show_help_category(event, category)
            elif data.startswith('section_'):
                section = data.replace('section_', '')
                await self.show_help_section(event, section)
            elif data == 'back_to_categories':
                await self.help_command(event)
        except Exception as e:
            if "MessageIdInvalidError" in str(e):
                # Message is too old to edit, handle gracefully in show_help_category
                pass
            else:
                # Log other errors and notify user
                logging.error(f"Error in help_callback: {str(e)}")
                await event.respond("Sorry, there was an error processing your request. Please try again.")

    async def show_help_category(self, event, category):
        try:
            if category == 'main':
                text = (
                    'üìö **Main Help Menu**\n\n'
                    '**Key Features:**\n'
                    '‚Ä¢ Forward messages to multiple groups\n'
                    '‚Ä¢ Set custom intervals for each group\n'
                    '‚Ä¢ Monitor forwarding status\n\n'
                    '**Basic Commands:**\n'
                    '‚Ä¢ /help - Show this help menu\n'
                    '‚Ä¢ /register - Register your account\n'
                    '‚Ä¢ /addgroup - Add a new group\n'
                    '‚Ä¢ /fwd - Forward a message\n'
                    '‚Ä¢ /status - Check forwarding status'
                )
            elif category == 'faq':
                text = (
                    '‚ùì **Frequently Asked Questions**\n\n'
                    '**Q: How do I start using the bot?**\n'
                    'A: Register first with /register, then add groups with /addgroup\n\n'
                    '**Q: How do I get a session string?**\n'
                    'A: Use @SessionStringZBot and choose Telethon\n\n'
                    '**Q: How do I forward messages?**\n'
                    'A: Reply to any message with /fwd command\n\n'
                    '**Q: Can I set different intervals?**\n'
                    'A: Yes, each group can have its own interval\n\n'
                    '**Q: How do I stop forwarding?**\n'
                    'A: Use /stopfwd command'
                )
            elif category == 'forward':
                text = (
                    'üì§ **Message Forwarding Help**\n\n'
                    '1Ô∏è‚É£ **Starting a Forward**\n'
                    '‚Ä¢ Find the message you want to forward\n'
                    '‚Ä¢ Reply to it with /fwd command\n'
                    '‚Ä¢ Select target groups\n'
                    '‚Ä¢ Choose forwarding interval\n\n'
                    '2Ô∏è‚É£ **Managing Forwards**\n'
                    '‚Ä¢ Use /status to check active forwards\n'
                    '‚Ä¢ Use /stopfwd to stop forwarding\n'
                    '‚Ä¢ Use /setinterval to change timing\n\n'
                    '3Ô∏è‚É£ **Forward Settings**\n'
                    '‚Ä¢ Each group can have different intervals\n'
                    '‚Ä¢ Intervals: 1 min to 24 hours\n'
                    '‚Ä¢ Multiple forwards can run simultaneously'
                )
            elif category == 'status':
                text = (
                    'üìä **Status & Monitoring Help**\n\n'
                    '1Ô∏è‚É£ **Checking Status**\n'
                    '‚Ä¢ Use /status to see active forwards\n'
                    '‚Ä¢ View next forward time for each group\n'
                    '‚Ä¢ Monitor success/failure rates\n\n'
                    '2Ô∏è‚É£ **Managing Forwards**\n'
                    '‚Ä¢ Pause/resume specific forwards\n'
                    '‚Ä¢ Stop all forwards with /stopfwd\n'
                    '‚Ä¢ View detailed statistics\n\n'
                    '3Ô∏è‚É£ **Troubleshooting**\n'
                    '‚Ä¢ Check group permissions\n'
                    '‚Ä¢ Verify bot admin status\n'
                    '‚Ä¢ Monitor error messages'
                )
            elif category == 'groups':
                text = (
                    'üìö Groups Help\n\n'
                    '‚Ä¢ Use /addgroup to add a new source group\n'
                    '‚Ä¢ Use /listgroups to see your configured groups\n'
                    '‚Ä¢ Use /removegroup to remove a source group'
                )
            elif category == 'accounts':
                text = (
                    'üì± Accounts Help\n\n'
                    '‚Ä¢ Use /addaccount to add a new account\n'
                    '‚Ä¢ Use /listaccounts to see your configured accounts\n'
                    '‚Ä¢ Use /removeaccount to remove an account'
                )
            elif category == 'forwards':
                text = (
                    '‚Ü™Ô∏è Forwards Help\n\n'
                    '‚Ä¢ Use /addforward to create a new forward rule\n'
                    '‚Ä¢ Use /listforwards to see your configured forwards\n'
                    '‚Ä¢ Use /removeforward to remove a forward rule'
                )
            elif category == 'register':
                text = (
                    'üìù **How to Register**\n\n'
                    '1Ô∏è‚É£ **Get Your Session String**\n'
                    '‚Ä¢ Use @SessionStringZBot\n'
                    '‚Ä¢ Choose Telethon\n'
                    '‚Ä¢ Enter your phone number\n'
                    '‚Ä¢ Enter the verification code\n'
                    '‚Ä¢ Copy the generated session string\n\n'
                    '2Ô∏è‚É£ **Register with Bot**\n'
                    '‚Ä¢ Use /register command\n'
                    '‚Ä¢ Paste your session string\n'
                    '‚Ä¢ Wait for confirmation\n\n'
                    '‚ùì Need help? Use the buttons below!'
                )
            elif category == 'guide':
                text = (
                    'üî∞ **Getting Started Guide**\n\n'
                    '1Ô∏è‚É£ **Registration**\n'
                    '‚Ä¢ First, register your account\n'
                    '‚Ä¢ You\'ll need a session string\n'
                    '‚Ä¢ Use /register command\n\n'
                    '2Ô∏è‚É£ **Add Groups**\n'
                    '‚Ä¢ Add bot to your groups\n'
                    '‚Ä¢ Use /addgroup command\n'
                    '‚Ä¢ Set forwarding intervals\n\n'
                    '3Ô∏è‚É£ **Start Forwarding**\n'
                    '‚Ä¢ Reply to message with /fwd\n'
                    '‚Ä¢ Choose target groups\n'
                    '‚Ä¢ Messages will auto-forward\n\n'
                    '4Ô∏è‚É£ **Monitor & Manage**\n'
                    '‚Ä¢ Check status with /status\n'
                    '‚Ä¢ Stop forwards with /stopfwd\n'
                    '‚Ä¢ View groups with /mygroups'
                )
            else:
                text = '‚ùå Invalid help category selected'
                logging.warning(f"Invalid help category requested: {category}")
            
            markup = self.get_help_markup()
            await event.edit(text, buttons=markup)
            
        except Exception as e:
            error_msg = '‚ùå An error occurred while showing help information'
            logging.error(f"Error in show_help_category: {str(e)}")
            await event.edit(error_msg)

    async def show_help_section(self, event, section: str):
        """Show detailed help for a specific section"""
        help_sections = {
            "register": (
                "üìù **How to Register**\n\n"
                "1Ô∏è‚É£ **Get Session String**\n"
                "‚Ä¢ Open @SessionStringZBot\n"
                "‚Ä¢ Click Start\n"
                "‚Ä¢ Choose Telethon\n"
                "‚Ä¢ Enter your phone\n"
                "‚Ä¢ Enter the code\n"
                "‚Ä¢ Copy the session string\n\n"
                "2Ô∏è‚É£ **Register with Bot**\n"
                "‚Ä¢ Use /register command\n"
                "‚Ä¢ Paste the session string\n"
                "‚Ä¢ Wait for confirmation\n\n"
                "Need help? Click below!"
            ),
            "add_groups": (
                "‚ûï **Adding Groups**\n\n"
                "1Ô∏è‚É£ **Prepare the Group**\n"
                "‚Ä¢ Add bot to group as admin\n"
                "‚Ä¢ Grant message permissions\n\n"
                "2Ô∏è‚É£ **Get Group ID or Username**\n"
                "‚Ä¢ **Group ID**: Forward group message to @username_to_id_bot\n"
                "‚Ä¢ **Username**: Use public group username (e.g., @mygroupname)\n"
                "‚Ä¢ **From link**: Extract from t.me/groupname\n\n"
                "3Ô∏è‚É£ **Add to Bot**\n"
                "‚Ä¢ Use /addgroup for single group\n"
                "‚Ä¢ Use /bulkaddgroups for multiple groups\n"
                "‚Ä¢ Enter group ID or username\n"
                "‚Ä¢ Groups will be added to your list"
            ),
            "how_forward": (
                "üì§ **How to Forward Messages**\n\n"
                "1Ô∏è‚É£ **Start Forwarding**\n"
                "‚Ä¢ Find message to forward\n"
                "‚Ä¢ Reply with /fwd command\n"
                "‚Ä¢ Select target groups\n"
                "‚Ä¢ Choose interval\n\n"
                "2Ô∏è‚É£ **Monitor Status**\n"
                "‚Ä¢ Use /status to check\n"
                "‚Ä¢ View forwarding schedule\n"
                "‚Ä¢ Monitor progress\n\n"
                "3Ô∏è‚É£ **Stop Forwarding**\n"
                "‚Ä¢ Use /stopfwd command\n"
                "‚Ä¢ Select message to stop"
            ),
            # Add more sections as needed
        }

        if section not in help_sections:
            await self.show_error(event, "Help section not found.")
            return

        # Add relevant action buttons based on section
        keyboard = []
        if section == "register":
            keyboard.extend([
                [Button.inline("üìù Register Now", data="register_start")],
                [Button.inline("‚ùì Registration FAQ", data="help_section_reg_issues")]
            ])
        elif section == "add_groups":
            keyboard.extend([
                [Button.inline("‚ûï Add Group", data="group_action_add")],
                [Button.inline("‚ùì Group FAQ", data="help_section_group_issues")]
            ])
        elif section == "how_forward":
            keyboard.extend([
                [Button.inline("üì§ Start Forwarding", data="forward_new")],
                [Button.inline("‚ùì Forwarding FAQ", data="help_section_forward_issues")]
            ])

        # Add navigation buttons
        keyboard.extend([
            [Button.inline("¬´ Back", data="help_category_main")],
            [Button.inline("üîç Search Help", data="help_category_search")]
        ])

        await event.edit(help_sections[section], buttons=keyboard)

    def get_help_markup(self):
        """Generate help navigation keyboard markup"""
        keyboard = [
            [
                Button.inline("¬´ Back to Categories", data="help_back_to_categories"),
                Button.inline("üè† Main Menu", data="help_category_main")
            ],
            [Button.inline("‚ùì FAQ", data="help_category_faq")]
        ]
        return keyboard